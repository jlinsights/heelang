const Airtable = require("airtable");
require("dotenv").config({ path: ".env.local" });

async function testAirtableConnection() {
  console.log("üîç Testing Airtable connection...");

  // ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;

  if (!apiKey || !baseId) {
    console.error("‚ùå Missing environment variables:");
    console.error("AIRTABLE_API_KEY:", apiKey ? "‚úÖ Set" : "‚ùå Missing");
    console.error("AIRTABLE_BASE_ID:", baseId ? "‚úÖ Set" : "‚ùå Missing");
    return;
  }

  console.log("‚úÖ Environment variables found");
  console.log("API Key:", apiKey.substring(0, 10) + "...");
  console.log("Base ID:", baseId);

  try {
    // Airtable Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const airtable = new Airtable({ apiKey });
    const base = airtable.base(baseId);

    console.log("\nüìö Testing Artworks table...");

    // ÏûëÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏµúÎåÄ 3Í∞ú)
    const artworkRecords = await base("Artworks")
      .select({
        maxRecords: 3,
        sort: [{ field: "year", direction: "desc" }],
      })
      .all();

    console.log(`Found ${artworkRecords.length} artwork records`);

    if (artworkRecords.length > 0) {
      console.log("\nüé® Sample artwork record:");
      const sample = artworkRecords[0];
      console.log("ID:", sample.id);
      console.log("Fields:", Object.keys(sample.fields));
      console.log("Sample data:", {
        title: sample.fields.title || sample.fields.Title,
        year: sample.fields.year || sample.fields.Year,
        medium: sample.fields.medium || sample.fields.Medium,
        description: sample.fields.description || sample.fields.Description,
        tags: sample.fields.tags || sample.fields.Tags,
      });
    }

    // Artist ÌÖåÏù¥Î∏î ÌÖåÏä§Ìä∏ (Îã®ÏàòÌòï)
    console.log("\nüë®‚Äçüé® Testing Artist table...");
    try {
      const artistRecords = await base("Artist")
        .select({
          maxRecords: 1,
        })
        .all();

      console.log(
        `Found ${artistRecords.length} artist records in Artist table`
      );

      if (artistRecords.length > 0) {
        console.log("\nüé≠ Sample artist record from Artist table:");
        const sample = artistRecords[0];
        console.log("ID:", sample.id);
        console.log("Fields:", Object.keys(sample.fields));
        console.log("Sample data:", {
          name: sample.fields.name || sample.fields.Name,
          bio: sample.fields.bio || sample.fields.Bio,
          email: sample.fields.email || sample.fields.Email,
          id: sample.fields.id || sample.fields.ID,
        });
      }
    } catch (error) {
      console.error("‚ùå Artist table access failed:", error.message);
      if (error.statusCode) {
        console.error("Status Code:", error.statusCode);
      }

      // Îã§Î•∏ ÌÖåÏù¥Î∏î Ïù¥Î¶Ñ ÏãúÎèÑ
      console.log("\nüë®‚Äçüé® Testing alternative table names...");
      const alternativeNames = ["artists", "ÏûëÍ∞Ä", "Table 1"];

      for (const tableName of alternativeNames) {
        try {
          console.log(`Trying "${tableName}" table...`);
          const artistRecords = await base(tableName)
            .select({
              maxRecords: 1,
            })
            .all();

          console.log(
            `‚úÖ Found ${artistRecords.length} artist records in "${tableName}" table`
          );

          if (artistRecords.length > 0) {
            console.log(`\nüé≠ Sample artist record from "${tableName}" table:`);
            const sample = artistRecords[0];
            console.log("ID:", sample.id);
            console.log("Fields:", Object.keys(sample.fields));
            console.log("Sample data:", {
              name: sample.fields.name || sample.fields.Name,
              bio: sample.fields.bio || sample.fields.Bio,
              email: sample.fields.email || sample.fields.Email,
              id: sample.fields.id || sample.fields.ID,
            });
          }
          break; // ÏÑ±Í≥µÌïòÎ©¥ Ï§ëÎã®
        } catch (tableError) {
          console.log(
            `‚ùå "${tableName}" table access failed:`,
            tableError.message
          );
        }
      }
    }

    // Î≤†Ïù¥Ïä§ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÌôïÏù∏ ÏãúÎèÑ
    console.log("\nüìã Attempting to list available tables...");
    try {
      // Airtable APIÎ•º ÌÜµÌï¥ Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const response = await fetch(
        `https://api.airtable.com/v0/meta/bases/${baseId}/tables`,
        {
          headers: {
            Authorization: `Bearer ${apiKey}`,
          },
        }
      );

      if (response.ok) {
        const metadata = await response.json();
        console.log("Available tables:");
        metadata.tables.forEach((table) => {
          console.log(`- ${table.name} (ID: ${table.id})`);
          console.log(
            `  Fields: ${table.fields.map((f) => f.name).join(", ")}`
          );
        });
      } else {
        console.log("Could not fetch base metadata");
      }
    } catch (metaError) {
      console.log("Could not fetch base metadata:", metaError.message);
    }

    console.log("\n‚úÖ Airtable connection test completed!");
  } catch (error) {
    console.error("‚ùå Airtable connection failed:", error.message);
    if (error.statusCode) {
      console.error("Status Code:", error.statusCode);
    }
  }
}

testAirtableConnection();
